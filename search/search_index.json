{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Blog/message/","text":"Message Bus Comparison Matrix This page provides a detailed comparison of popular message bus systems like Kafka, Artemis, MQTT, Red Hat AMQ, HiveMQ, and RabbitMQ. The comparison focuses on criteria relevant to the manufacturing industry, deployment options, open-source status, usage, and support availability. Comparison Matrix Feature/Criteria Kafka Artemis MQTT Red Hat AMQ HiveMQ RabbitMQ Primary Use Case Real-time data streams, big data High-throughput messaging Lightweight messaging for IoT Messaging for enterprise solutions MQTT-based IoT messaging General-purpose messaging Manufacturing Suitability High, suitable for large-scale data Medium to High, adaptable for small to large manufacturing use cases High, ideal for IoT and edge device messaging High, adaptable for various manufacturing use cases High, optimized for IoT in industrial environments Medium to High, adaptable for various manufacturing workloads Deployment Options Cloud, On-premises, Edge Cloud, On-premises Cloud, Edge, On-premises Cloud, On-premises Cloud, Edge, On-premises Cloud, On-premises Edge Device Compatibility Moderate, with some connectors available for IoT Limited, better suited for on-premises High, lightweight for IoT and edge Moderate, enterprise focused High, designed for IoT and edge Moderate, better for on-premises Open Source or Paid Open Source (Apache License 2.0) Open Source (Apache License 2.0) Open Source (various implementations) Paid (proprietary with open-source options) Paid with Community Edition (commercial license for Enterprise) Open Source (Mozilla Public License 1.1) Scalability High, designed for distributed systems High, but with moderate tooling Moderate, designed for small, lightweight devices High, with clustering support High, especially in MQTT deployments Moderate, scalable with clustering Latency Low latency for large data streams Low to moderate, performant Low, optimized for lightweight messages Low latency with advanced configuration Low, designed for high-speed MQTT Moderate to low, dependent on setup Industry Usage Broad, especially in finance, media, and big data Broad, used in finance, and smaller-scale industries IoT-specific, used in automotive, healthcare Enterprise, primarily in finance, healthcare Primarily IoT and industrial automation Broad, including retail, e-commerce, and logistics Protocol Support Proprietary, works with Kafka clients AMQP, MQTT MQTT AMQP, MQTT, STOMP, OpenWire MQTT AMQP, MQTT, STOMP Security SSL, SASL, ACL SSL, SASL TLS, basic authentication TLS, advanced security settings TLS, enterprise-grade security SSL, basic authentication Community & Support Strong community, many online resources Medium, Apache community Large community with MQTT broker implementations Red Hat official support Enterprise-grade support, active community for Community Edition Strong community and commercial support options Suitable for Cloud Yes, highly suitable for cloud deployments Yes, deployable on various cloud services Yes, highly compatible with cloud and edge Yes, with OpenShift compatibility Yes, optimized for cloud and hybrid Yes, widely used in cloud Management Tools Kafka Connect, KSQL, Kafka Streams Web Console, JMX Simple, often depends on broker used Red Hat AMQ Console, OpenShift integration Control Center, Admin UI for Enterprise Management plugins available Key Notes Kafka : Excellent for real-time analytics, distributed environments, and large-scale data pipelines, though it can be resource-intensive. Artemis : A solid choice for high-throughput messaging, with better scalability than most but limited edge compatibility. MQTT : Great for IoT and edge computing; MQTT protocol is lightweight and ideal for constrained devices. Red Hat AMQ : Suited for enterprise environments with robust support and management tools, but generally a paid solution. HiveMQ : MQTT broker optimized for IoT and industrial edge deployments, available in both community and enterprise versions. RabbitMQ : Versatile for general-purpose messaging; popular for retail, logistics, and e-commerce.","title":"Message Bus Comparision"},{"location":"Blog/message/#message-bus-comparison-matrix","text":"This page provides a detailed comparison of popular message bus systems like Kafka, Artemis, MQTT, Red Hat AMQ, HiveMQ, and RabbitMQ. The comparison focuses on criteria relevant to the manufacturing industry, deployment options, open-source status, usage, and support availability.","title":"Message Bus Comparison Matrix"},{"location":"Blog/message/#comparison-matrix","text":"Feature/Criteria Kafka Artemis MQTT Red Hat AMQ HiveMQ RabbitMQ Primary Use Case Real-time data streams, big data High-throughput messaging Lightweight messaging for IoT Messaging for enterprise solutions MQTT-based IoT messaging General-purpose messaging Manufacturing Suitability High, suitable for large-scale data Medium to High, adaptable for small to large manufacturing use cases High, ideal for IoT and edge device messaging High, adaptable for various manufacturing use cases High, optimized for IoT in industrial environments Medium to High, adaptable for various manufacturing workloads Deployment Options Cloud, On-premises, Edge Cloud, On-premises Cloud, Edge, On-premises Cloud, On-premises Cloud, Edge, On-premises Cloud, On-premises Edge Device Compatibility Moderate, with some connectors available for IoT Limited, better suited for on-premises High, lightweight for IoT and edge Moderate, enterprise focused High, designed for IoT and edge Moderate, better for on-premises Open Source or Paid Open Source (Apache License 2.0) Open Source (Apache License 2.0) Open Source (various implementations) Paid (proprietary with open-source options) Paid with Community Edition (commercial license for Enterprise) Open Source (Mozilla Public License 1.1) Scalability High, designed for distributed systems High, but with moderate tooling Moderate, designed for small, lightweight devices High, with clustering support High, especially in MQTT deployments Moderate, scalable with clustering Latency Low latency for large data streams Low to moderate, performant Low, optimized for lightweight messages Low latency with advanced configuration Low, designed for high-speed MQTT Moderate to low, dependent on setup Industry Usage Broad, especially in finance, media, and big data Broad, used in finance, and smaller-scale industries IoT-specific, used in automotive, healthcare Enterprise, primarily in finance, healthcare Primarily IoT and industrial automation Broad, including retail, e-commerce, and logistics Protocol Support Proprietary, works with Kafka clients AMQP, MQTT MQTT AMQP, MQTT, STOMP, OpenWire MQTT AMQP, MQTT, STOMP Security SSL, SASL, ACL SSL, SASL TLS, basic authentication TLS, advanced security settings TLS, enterprise-grade security SSL, basic authentication Community & Support Strong community, many online resources Medium, Apache community Large community with MQTT broker implementations Red Hat official support Enterprise-grade support, active community for Community Edition Strong community and commercial support options Suitable for Cloud Yes, highly suitable for cloud deployments Yes, deployable on various cloud services Yes, highly compatible with cloud and edge Yes, with OpenShift compatibility Yes, optimized for cloud and hybrid Yes, widely used in cloud Management Tools Kafka Connect, KSQL, Kafka Streams Web Console, JMX Simple, often depends on broker used Red Hat AMQ Console, OpenShift integration Control Center, Admin UI for Enterprise Management plugins available","title":"Comparison Matrix"},{"location":"Blog/message/#key-notes","text":"Kafka : Excellent for real-time analytics, distributed environments, and large-scale data pipelines, though it can be resource-intensive. Artemis : A solid choice for high-throughput messaging, with better scalability than most but limited edge compatibility. MQTT : Great for IoT and edge computing; MQTT protocol is lightweight and ideal for constrained devices. Red Hat AMQ : Suited for enterprise environments with robust support and management tools, but generally a paid solution. HiveMQ : MQTT broker optimized for IoT and industrial edge deployments, available in both community and enterprise versions. RabbitMQ : Versatile for general-purpose messaging; popular for retail, logistics, and e-commerce.","title":"Key Notes"}]}